// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id42      String?  @unique
  username  String  @unique
  status    Activity @default(OFFLINE)
  email  String  @unique
  hash   String
  hashRt String?

  TFA            String?
  isTFA          Boolean @default(false)
  firstName      String?
  lastName       String?
  profilePicture String?

  skin String @default("white")
  map  String @default("basic")

  stats                 Stats?
  gamePlayed            GamePlayed[]
  achievementDone       AchievementDone[]
  leftPlayerToSpectate  Game[]            @relation(name: "LeftPlayerToSpectate")
  rightPlayerToSpectate Game[]            @relation(name: "RightPlayerToSpectate")
  leftPlayerHistory     GamePlayed[]      @relation(name: "LeftPlayerHistory")
  rightPlayerHistory    GamePlayed[]      @relation(name: "RightPlayerHistory")

  ownerChats  ChatRoom[]
  adminChats  ChatRoom[] @relation(name: "UserAdmin")
  memberChats ChatRoom[] @relation(name: "UserMember")

  challengesReceived Challenge[] @relation(name: "ChallengeRecv")
  challengesSent     Challenge[] @relation(name: "ChallengeSent")

  messages              Message[]
  privateMessageSender  PrivateMessage[] @relation(name: "PrivateMessageSender")
  privateMessagReceiver PrivateMessage[] @relation(name: "PrivateMessageReceiver")

  penaltiesAuthor Penalty[] @relation(name: "PenaltiesAuthor")
  penaltiesTarget Penalty[] @relation(name: "PenaltiesTarget")

  blockedByYou				User[] @relation(name: "Blocked")
  blockedYou				User[] @relation(name: "Blocked")

  @@map("users")
}

enum Activity {
	ONLINE
	OFFLINE
	IN_GAME
}

model Challenge {
  id          Int     @id @default(autoincrement())
  powerUpMode Boolean
  receiver    User    @relation(name: "ChallengeRecv", fields: [receiverId], references: [id])
  receiverId  Int
  sender      User    @relation(name: "ChallengeSent", fields: [senderId], references: [id])
  senderId    Int
}

model ChatRoom {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  password      String?
  accessibility Accessibility
  owner         User          @relation(fields: [ownerId], references: [id])
  ownerId       Int
  admins        User[]        @relation(name: "UserAdmin")
  members       User[]        @relation(name: "UserMember")
  messages      Message[]
  penalties     Penalty[]
}

model Message {
  id               Int             @id @default(autoincrement())
  user             User            @relation(fields: [userId], references: [id])
  userId           Int
  message          String
  room             ChatRoom?       @relation(fields: [chatRoomId], references: [id])
  chatRoomId       Int?
  sendAt           DateTime        @default(now())
  privateMessage   PrivateMessage? @relation(fields: [privateMessageId], references: [id])
  privateMessageId Int?
}

model PrivateMessage {
  id         Int       @id @default(autoincrement())
  name       String    @default("PRIVATE")
  sender     User      @relation("PrivateMessageSender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User      @relation("PrivateMessageReceiver", fields: [receiverId], references: [id])
  receiverId Int
  message    Message[]
}

enum Accessibility {
  PUBLIC
  PRIVATE
  PROTECTED
  PRIVATE_PROTECTED
}

model Penalty {
  id            Int         @id @default(autoincrement())
  date          DateTime    @default(now())
  chat          ChatRoom    @relation(fields: [chatId], references: [id])
  chatId        Int
  author        User        @relation(name: "PenaltiesAuthor", fields: [authorId], references: [id])
  authorId      Int
  target        User        @relation(name: "PenaltiesTarget", fields: [targetId], references: [id])
  targetId      Int
  type          PenaltyType
  durationInMin Int
}

enum PenaltyType {
  BAN
  MUTE
}

model FriendRequest {
  id         Int    @id @default(autoincrement())
  status     Status
  creatorId  Int
  receiverId Int
}

enum Status {
  pending
  accepted
  declined
}

model Stats {
  id Int @id @default(autoincrement())

  defeat  Int @default(0)
  victory Int @default(0)
  xp      Int @default(0)
  level   Int @default(0)

  modeExplorer     Boolean @default(false)
  fashionWeek      Boolean @default(false)
  traveler         Boolean @default(false)
  failureKnowledge Boolean @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model GamePlayed {
  id            Int      @id @default(autoincrement())
  leftPlayer    User     @relation(name: "LeftPlayerHistory", fields: [leftPlayerId], references: [id])
  leftPlayerId  Int
  rightPlayer   User     @relation(name: "RightPlayerHistory", fields: [rightPlayerId], references: [id])
  rightPlayerId Int
  leftScore     Int
  rightScore    Int
  date          DateTime @default(now())
  user          User[]
}

model AchievementDone {
  id     Int      @id @default(autoincrement())
  title  String
  desc   String
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
  userId Int
}

model Game {
  id            Int    @id @default(autoincrement())
  gameId        String @unique
  leftPlayer    User   @relation(name: "LeftPlayerToSpectate", fields: [leftPlayerId], references: [id])
  leftPlayerId  Int
  rightPlayer   User   @relation(name: "RightPlayerToSpectate", fields: [rightPlayerId], references: [id])
  rightPlayerId Int
}
