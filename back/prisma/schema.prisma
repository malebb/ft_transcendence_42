// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id42      String?  @unique
  username  String

  email  String  @unique
  hash   String
  hashRt String?

  TFA            String?
  isTFA          Boolean @default(false)
  firstName      String?
  lastName       String?
  profilePicture String?

  skin String @default("white")
  map  String @default("basic")

  stats           Stats?
  gamePlayed      GamePlayed[]
  achievementDone AchievementDone[]

  ownerChats	ChatRoom[]
  adminChats	ChatRoom[] @relation(name: "UserAdmin")
  memberChats	ChatRoom[] @relation(name: "UserMember")

  messages		Message[]

  @@map("users")
}

model ChatRoom {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  password      String?
  accessibility Accessibility
  owner         User          @relation(fields: [ownerId], references: [id])
  ownerId       Int
  admins         User[]        @relation(name: "UserAdmin")
  members		User[]			@relation(name: "UserMember")
  messages      Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  message    String
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  sendAt     DateTime  @default(now())
}

enum Accessibility {
  PUBLIC
  PRIVATE
  PROTECTED
}

model FriendRequest {
  id         Int    @id @default(autoincrement())
  status     Status
  creatorId  Int
  receiverId Int
}

enum Status {
  pending
  accepted
  declined
}

model Stats {
  id Int @id @default(autoincrement())

  defeat  Int @default(0)
  victory Int @default(0)
  xp      Int @default(0)
  level   Int @default(0)

  modeExplorer     Boolean @default(false)
  fashionWeek      Boolean @default(false)
  traveler         Boolean @default(false)
  failureKnowledge Boolean @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model GamePlayed {
  id            Int      @id @default(autoincrement())
  leftUsername  String
  rightUsername String
  leftScore     Int
  rightScore    Int
  date          DateTime @default(now())
  user          User[]
}

model AchievementDone {
  id     Int      @id @default(autoincrement())
  title  String
  desc   String
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
  userId Int
}

model Game {
  id            Int    @id @default(autoincrement())
  gameId        String @unique
  leftUsername  String
  rightUsername String
}
